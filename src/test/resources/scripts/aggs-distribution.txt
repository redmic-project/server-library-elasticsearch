boolean filterByConfidence(def confidence, def params) {
	params.confidences.contains(confidence);
}
boolean filterByPathTaxon(def pathTaxon, def params) {
	params.taxons.contains(pathTaxon);
}

boolean filterByMisidentification(def taxon, def params) {

	for (reg in taxon.registers) {
		if (params.taxons.contains(reg.misidentification))
			return true;
	}
	return false;
}

def getRegisters(def taxon, def params) {
	return ["registers": taxon.registers.findAll(reg -> filterByConfidence(reg.confidence, params))];
}

void checkRegister(def result, def taxon, def params) {
	if (filterByPathTaxon(taxon.path, params) || filterByPathTaxon(taxon.equivalent, params) || filterByMisidentification(taxon, params)) {
			def taxonRegisters = getRegisters(taxon, params);

			if (taxonRegisters.registers.size() > 0) {
				result['registerCount'] += taxon.registers.size();
				result['taxonCount'] ++;
			}
	}
}

Map result = new HashMap();

result['registerCount'] = 0;
result['taxonCount'] = 0;

for (tax in params._source.properties.taxons) {
	checkRegister(result, tax, params);
}

return result;
